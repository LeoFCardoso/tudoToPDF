# Sample config file for DOC4J
#
##############################

# docx setup

# XHTMLImporter needs to know how to convert pixel measurements
# This is read by UnitsOfMeasurement
docx4j.DPI=96

# Page size: use a value from org.docx4j.model.structure.PageSizePaper enum
# eg A4, LETTER
docx4j.PageSize=A4
# Page size: use a value from org.docx4j.model.structure.MarginsWellKnown enum
docx4j.PageMargins=NORMAL
docx4j.PageOrientationLandscape=false

# These will be injected into docProps/app.xml
# if App.Write=true
docx4j.App.write=true
docx4j.Application=docx4j
docx4j.AppVersion=3.2.0
# of the form XX.YYYY where X and Y represent numerical values
# WARNING: -SNAPSHOT will cause Word 2010 x64 to treat the docx as corrupt! 

# These will be injected into docProps/core.xml
docx4j.dc.write=true
docx4j.dc.creator.value=docx4j
docx4j.dc.lastModifiedBy.value=docx4j

##############################
# pptx setup

# Page size: use a value from org.pptx4j.model.SlideSizesWellKnown enum
# eg A4, LETTER
pptx4j.PageSize=A4
pptx4j.PageOrientationLandscape=true

pptx4j.openpackaging.packages.PresentationMLPackage.DefaultTheme=org/docx4j/openpackaging/parts/PresentationML/theme.xml

##############################
# docx4j general config

#
#docx4j.McPreprocessor=true

# Use output method "xml" (as opposed to "html")
docx4j.Convert.Out.HTML.OutputMethodXML=true

# convert a bookmark to anchor (a), @id (id), or ignore (null)
# defaults to anchor. @since 3.2.1 
docx4j.Convert.Out.HTML.BookmarkStartWriter.mapTo=a

# If false, throw an exception if something is encountered which
# output processing is unable to handle.  TODO fully implement this.
docx4j.Convert.Out.Lossy=true

# If true, parse 12/04/2012 as 4 December 
docx4j.Fields.Dates.DateFormatInferencer.USA=false

# What to treat as the decimal point when converting a string
# to a number.  Fallback only, 
# used if the docx itself does not contain a setting for
#    <w:decimalSymbol />
docx4j.Fields.Numbers.DecimalSymbol=.
# What character may be used to group thousands
docx4j.Fields.Numbers.GroupingSeparator=,
# What character may be used to separate styles and levels in \t switch field argument
docx4j.Fields.TOC.SwitchT.Separator=,

# PDF output; ability to specify font substitutions.  See src/samples/_resources
# Avoid using both this and fontMapper.getFontMappings() for the same fonts!
# since docx4j 3.2.0
#docx4j.fonts.fop.util.FopConfigUtil.substitutions=fop-substitutions.xml

# This override available since docx4j 3.2.0
# Defaults to org/docx4j/fonts/microsoft/MicrosoftFonts.xml
# which is contained in the docx4j jar
# If you need to override it in order to provide different file names for
# one or more fonts, start by extracting and editing a copy of the existing file
docx4j.fonts.microsoft.MicrosoftFonts=org/docx4j/fonts/microsoft/MicrosoftFonts.xml

# In XHTML import, span/@style='background-color:red;' would usually become w:rPr/w:shd/@w:fill="ff0000"
# Set this to true to use w:highlight instead 
docx4j.model.properties.PropertyFactory.createPropertyFromCssName.background-color.useHighlightInRPr=true

# Whether to System.gc() before attempting to delete tmp image files.
# Introduced in docx4j 3.  For consistency with previous versions, default is true 
docx4j.openpackaging.parts.WordprocessingML.BinaryPartAbstractImage.TempFiles.ForceGC=true

# This override available since docx4j 3.2.0
# Defaults to org/docx4j/jaxb/mc-preprocessor.xslt
docx4j.jaxb.JaxbValidationEventHandler=custom-preprocessor.xslt

# The styles part content used by WordprocessingMLPackage createPackage
# and by getStyleDefinitionsPart(true) where the styles part is null
# This override available since docx4j 3.2.0
docx4j.openpackaging.parts.WordprocessingML.StyleDefinitionsPart.DefaultStyles=org/docx4j/openpackaging/parts/WordprocessingML/styles.xml

# Used to try to activate a style (PropertyResolver.activateStyle) which isn't defined in the styles part
# This override available since docx4j 3.2.0
docx4j.openpackaging.parts.WordprocessingML.StyleDefinitionsPart.KnownStyles=org/docx4j/openpackaging/parts/WordprocessingML/KnownStyles.xml

docx4j.openpackaging.parts.WordprocessingML.FontTablePart.DefaultFonts=org/docx4j/openpackaging/parts/WordprocessingML/fontTable.xml

docx4j.openpackaging.parts.WordprocessingML.NumberingDefinitionsPart.DefaultNumbering=org/docx4j/openpackaging/parts/WordprocessingML/numbering.xml

# Embedded Fonts - extract to dir
# By default, docx4j will extract embedded fonts to dir 
# ~/.docx4all/temporary embedded fonts
# (creating it if necessary).
#docx4j.openpackaging.parts.WordprocessingML.ObfuscatedFontPart.tmpFontDir=c:\\temp


# OpenDoPE
docx4j.model.datastorage.BindingTraverser.XHTML.Block.rStyle.Adopt=true
docx4j.model.datastorage.BindingTraverserXSLT.xslt=org/docx4j/model/datastorage/bind.xslt
# .. placeholder to use instead of "Click here to enter text" 
# Defaults to OpenDoPE/placeholder.xml, and if nothing is there,
# will fallback to org/docx4j/model/datastorage/placeholder.xml (which is in the docx4j jar)
#docx4j.model.datastorage.placeholder=OpenDoPE/placeholder.xml

# These affect the output of numbers in Arabic; see further RunFontSelector
# For further discussion, please see http://www.docx4java.org/forums/pdf-output-f27/arabic-number-digits-in-pdf-output-t1826.html
# Value can be 'Context'|'National'
docx4j.MicrosoftWindows.Region.Format.Numbers.NativeDigits=National
# Value can be 'Hindi'|'Context'|'Arabic'|'System'; default is Arabic ie 1234
docx4j.MicrosoftWord.Numeral=Arabic

# Whether events are published asynchronously (in which case order is not guaranteed).  Default is false. 
docx4j.events.Docx4jEvent.PublishAsync=false

##############################
# JAXP factories

# Properties which XmlUtils uses to determine the factory class to be used for SAX style parsing 
# Use the following, if specified here
#javax.xml.parsers.SAXParserFactory=com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl
# If that is commented, then do nothing if the following is true (default is false)
#docx4j.javax.xml.parsers.SAXParserFactory.donotset=true
# If the javax.xml.parsers.SAXParserFactory is not specified, and donotset is false,
# AND you are using Sun/Oracle Java 6/7,
# "com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl" will be used 
# (avoiding Crimson).

# Properties which XmlUtils uses to determine the factory class to be used for DOM style parsing 
# Use the following, if specified here
#javax.xml.parsers.DocumentBuilderFactory=com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl
# If that is commented, then do nothing if the following is true (default is false)
#docx4j.javax.xml.parsers.DocumentBuilderFactory.donotset=true
# If the javax.xml.parsers.DocumentBuilderFactory is not specified, and donotset is false,
# AND you are using Sun/Oracle Java 6/7,
# "com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl" will be used 


# TransformerFactory Property? that specifies the factory class to be used when transforming documents using 
# the javax.xml.transform packages.
# "org.apache.xalan.processor.TransformerFactoryImpl" 
# is used in docx4j.  Requires Xalan on your classpath.
# Note: if you chose something else, HTML and PDF output won't work, since
# these rely on Xalan extension functions. 
# docx4j stores a TransformerFactory in XmlUtils. It shouldn't affect the system-wide property. 
# Bottom line: add Xalan to your classpath. this property is NOT IMPLEMENTED.


# XPathFactory  NOT USED

##############################
# docx4j commercial/enterprise settings


# MergePptx setup
# ^^^^^^^^^^^^^^^
# AlternateContent needs to be removed from the Slides.
# If it isn't, Powerpoint 2010 might complain that the presentation
# needs to be repaired.
# docx4j 3.0 does this (actually, nightlies post 2013 04 29).  But if you are using
# docx4j 2.8.1 (or a nightly earlier than 2013 04 29), then setting this to
# true will have MergePptx do it.  Default is false. 
MergePptx.AlternateContentFallback=true

# This override available since Enterprise 3.1.0.5
# Defaults to com/plutext/docx/toc/TocStyles.xml
# which is contained in the Enterprise jar
# It provides default toc style definitions,
# for use if none are defined in the docx itself.
com.plutext.docx.toc.TocStyles.xml=com/plutext/docx/toc/TocStyles.xml
  